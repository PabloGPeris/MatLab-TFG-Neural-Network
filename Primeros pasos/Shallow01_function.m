function [Y,Xf,Af] = Shallow01_function(X,~,~)
%Shallow01_function neural network simulation function.
%
% Auto-generated by MATLAB, 06-Jul-2020 19:53:00.
%
% [Y] = Shallow01_function(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 9xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1];
x1_step1.gain = [2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.1590854493372908518;-1.6689837543191428093;1.1941150522382040222;0.76900604408475459195;-0.20317405916556038892;0.45580476956023796564;0.31740836060220178894;-0.82543177149574653573;-0.81339938259368982365;2.3331006267402227827;-1.7344558822676774401;-1.8260850815648832501];
IW1_1 = [-1.6019646828633768987 -0.92000061412084377377 0.97837461759873389777 0.9456036197142677624 -1.5979658806934098347 0.62574654599688017687 -0.14340820446396218557 0.22856357124005222126 -0.12508560293363046867;0.25343053680184646215 0.34418290658514549829 -0.78018917521768771373 0.57996005610025902488 -0.82334856833674208154 -0.52385059394219180007 -0.30576740979021110878 -0.9327409382690196038 0.025461208277661750293;-0.30563942507127023207 -0.055424621857055406116 0.55117850102801824175 -0.62062172926069325563 -1.5874551234436533598 1.3569080570999050295 -0.078894046432097408861 0.91823003790333890262 1.1731611099414722688;-0.22023946002307467906 -0.65269712526444090273 -1.2473687257243297744 -0.76611711371716473273 0.87842506367800121669 -0.64354828729924828945 -0.25978632697884512792 -0.44583448045268792015 -0.40513069100879772755;1.0758186791751662703 0.72248645577319181577 0.65889746438094409786 0.86495629022499209704 -0.17126274758741255599 1.3648600434153259631 -0.65677528495867021352 0.34305900388705556914 -0.61324652817815250572;-0.34893239512860746432 -0.91337926111195522072 -1.0715341988051236832 -0.072768858092225802148 -0.30258052905089372064 -0.44850134566911109557 -1.140219630528813699 -0.089908813646801366559 -0.66295531611394886706;-0.89176560899437629093 -1.0112439607736818381 -0.35318405963913607204 -1.0040502625668612513 -0.44107445860832844575 0.39428779485505105473 -0.39478072950111259276 0.62268421567528653426 0.076527910228480988675;-0.23044185278409845541 0.20199869588480881544 0.59102835290207289543 -1.1088719489313441091 -0.37624343231818085931 -1.3569709131958647141 1.1614181463282622353 0.73039233164160577427 -1.2766291860723923968;-0.84300854932433277877 0.56320911507981474831 -0.63793389825666713122 0.4224050630319846622 -0.68915195016522767801 1.0865583903826252499 -0.42030058693681998649 -0.086739250128380823712 -0.61654766133560812147;1.1452873871655231408 0.91309853993792233773 0.87406622930870658816 0.68902734520767017212 -0.54118482297969461303 0.87170523058299775876 -0.11160900978726270849 0.61058098831872353873 -0.45555015364097611874;-0.68797516567899119622 0.28173709718135481195 -0.32903076924351037924 -0.5039583388064681202 0.24696521685930000745 0.44318063840008203869 -1.8203409488323964993 -0.16382344920648364561 -0.38327825340965682166;-0.27619838434051569021 0.57720369475235477896 -1.0800592192097493438 0.16389485334135830974 0.62486550322413192404 0.86507338703419289772 0.010004761506033701957 0.45240844850441724878 0.77522326693125598318];

% Layer 2
b2 = [-1.2289198380838235458;0.80522213083813409806];
LW2_1 = [1.3476720286607168919 -0.89933852363266830743 -1.9193479595200588772 0.3111619641364338773 1.4307590830983787367 0.26213981158332372301 0.57198195930806217113 0.78828166904192309428 -0.43807654415249852597 -1.8995772526037402184 1.3424419488424899072 -0.078141762787735213891;-1.4711691017998034248 -0.91457100133517565954 0.35860677503765236995 -0.88686502573877512567 -0.15925807405145678275 -1.1286998276476001291 -0.17974900267552895716 -0.73375346835282229119 0.29290071828377622909 1.4165432098163337482 -0.71451654311973211708 0.40739501235868691431];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
